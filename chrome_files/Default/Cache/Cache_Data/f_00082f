<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="La mayor colección de tutoriales y referencias">
    <meta name="keywords" content="Python, JavaScript, PHP, Java, Kotlin, C#, C++, C, Golang, Acervo Lima">
    <link rel="shortcut icon" href="https://es.acervolima.com/resources/img/favicon.ico" type="image/x-icon">
    <title>Python | Diferentes formas de matar un hilo &#8211; Acervo Lima</title>

    <script type="text/javascript" src="https://gc.kis.v2.scr.kaspersky-labs.com/FD126C42-EBFA-4E12-B309-BB3FDD723AC1/main.js?attr=jxVY2cZvv5hydVDFuH9VDg-sDT3-EHfNjF6JcuUppZMABocViH1of7YFLn6NYrZvOH0w7SeOSqAEsGmmxkwDUNFXIFUxszhaeajHj7gqQYiGvG6ZUxlFUwT-qlR6888f" charset="UTF-8"></script><link rel="stylesheet" crossorigin="anonymous" href="https://gc.kis.v2.scr.kaspersky-labs.com/E3E8934C-235A-4B0E-825A-35A08381A191/abn/main.css?attr=aHR0cHM6Ly9lcy5hY2Vydm9saW1hLmNvbS9weXRob24tZGlmZXJlbnRlcy1mb3JtYXMtZGUtbWF0YXItdW4taGlsby8"/><style>
@import url('https://fonts.googleapis.com/css2?family=Lato:wght@300;400;700;900&family=Roboto:wght@100;300;400&display=swap');

/* CONFIGURAÇÕES GLOBAIS */

:root {
    font-size: 16px;
}

* {
    box-sizing: border-box;
}

body {
    margin: 0px;
    padding: 0px;
    font-family: 'Roboto', sans-serif;
    word-wrap: break-word;
}

.conteiner {
    max-width: 960px;
    margin: 0 auto;
}

.text-decoration-none {
    text-decoration: none;
}

.text-uppercase {
    text-transform: uppercase;
} 

table {
    display: block;
    border-spacing: 0;
    margin: 0 0 2.3rem;
    width: 100%;
    overflow-x: auto;
}

th {
    font-weight: bold !important;
    text-transform: uppercase !important;
}

td {
    padding: 0.6rem 1rem 0.6rem 0;
}

th, td {
    border-bottom: 1px solid rgba(0, 0, 0, 0.1) !important;
    font-weight: normal;
    text-align: left;
}

ul {
    list-style: square;
}

pre {
    font-size: 1.2rem;
    padding: 1rem;
    border-left: 3px solid greenyellow;
    background-color: #272822;
    font-family: monospace;
    color: #fff;
    overflow-x: auto;
}

p {
    margin: 0px;
    margin-bottom: 1rem;
}

img, video {
    max-width: 100%;
    height: auto;
}

.post-content div {
    max-width: 100%;
    overflow: auto;
}

.h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6 {
    margin-top: 0;
    margin-bottom: .5rem;
    font-weight: 500;
    line-height: 1.2;
}

/* FIM DAS CONFIGURAÇÕES GLOBAIS */

/* HEADER PRINCIPAL */

.header-principal {
    background-color: #000;
}

.titulo-subtitulo-outter {
    text-align: center;
    padding: 2.6rem 0px 1.4rem;
    margin: 0px 1rem;
}

.titulo-acervolima {
    margin: 0px;
    text-transform: uppercase;
    font-family: 'Lato', sans-serif;
    font-weight: lighter;
    font-size: calc(2rem + 4.5vw);
    line-height: 1.1;
    letter-spacing: 2px;
}

.principal-link-acervolima {
    color: #FFF;
    text-decoration: none;
}

.subtitulo-acervolima {
    color: #666;
    margin: 0px;
    font-size: 1rem;
    line-height: 1;
    letter-spacing: 2px;
}

.navbar-outter {
    background-color: #404040;
}

#btn-navbar-toggler {
    display: none;
}

.nav-link {
    display: inline-block;
    padding: 0.6rem;
    color: #CCC;
    font-family: 'Lato', sans-serif;
    text-decoration: none;
    text-transform: uppercase;
    transition: 0.3s;
}

.nav-link-ativo {
    color: #FFF;
}

.nav-link:hover {
    background-color: #303030;
    color: #FFF;
}

/* FIM HEADER PRINCIPAL */


/* MAIN PRINCIPAL */

.row {
    display: flex;
}

.primarywrap {
    flex: 0 0 auto;
    width: 66.6%;
    padding-right: calc(1.5rem * .5);
    padding-left: calc(1.5rem * .5);
    padding-bottom: 1.5rem
}

.secundarywrap {
    flex: 0 0 auto;
    width: 33.3%;
    padding-right: calc(1.5rem * .5);
    padding-left: calc(1.5rem * .5);
}

.main-principal {
    padding-top: 2.6rem;
    font-size: 1.2rem;
    color: #333;
}

.main-principal a {
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    color: #b00;
}

.titulo-post {
    margin: 0px 0px 1rem;
    text-transform: uppercase;
    font-family: 'Lato', sans-serif;
    font-size: 1.9rem;
    color: #000;
}

.titulo-post a {
    color: currentColor;
    border: none;
}

.bloco-resumo-artigo {
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    margin-bottom: 1.5rem;
    padding-bottom: 1.5rem;
}

.resumo-post {
    line-height: 1.9rem;
}

.link-lermais-outter {
    margin: .5rem .25rem 1.5rem;
    text-align: right;
}

.footer-resumo-post {
    font-size: 0.9rem;
    color: rgba(0, 0, 0, 0.45);
    letter-spacing: 2px;
}

.footer-resumo-post a {
    color: inherit;
}

.footer-resumo-post a:hover {
    color: #b00;
}

.nav-prev-next {
    display: flex;
    margin-top: 2rem;
    justify-content: space-between;

}

a.prev-next {
    padding: 0.25rem 1.5rem;
    background-color: #000;
    color: #FFF;
    text-decoration: none;
    border-radius: 4px;
}

.widget:last-child {
    margin-top: 1.5rem;
}

.widget-titulo {
    color: #000;
    font-size: 1.5rem;
}

.widgets-wrap a {
    border: none;
    color: inherit;
    text-decoration: none;
}

.widgets-wrap a:hover {
    color: #b00;
}

.list-group {
    display: flex;
    flex-direction: column;
    padding-left: 0;
    margin-bottom: 0;
}

.list-group-flush > .list-group-item {
    border-width: 0 0 1px;
}

.list-group-item {
    position: relative;
    display: block;
    padding: .5rem 1rem;
    color: #212529;
    text-decoration: none;
    background-color: #fff;
    border: 1px solid rgba(0,0,0,.125);
}

/* FIM MAIN PRINCIPAL */

/* FOOTER PRINCIPAL */

.footer-principal {
    margin-top: 1.5rem;
    background-color: #f8f9fa;
}

.footer-principal a {
    color: currentColor;
    text-decoration: none;
}

.linha-footer {
    max-width: 1116px;
    display: flex;
    margin: 0px auto;
    color: #6c757d;
}

.coluna-footer {
    min-width: 24.99%;
    padding: 1.5rem;
}

.titulo-coluna {
    display: inline-block;
    margin: 0px;
    padding-bottom: 1rem;
    text-transform: uppercase;
    font-size: 1rem;
    font-weight: 700;
}

.footer-copyright {
    padding: 1.5rem;
    background-color: #000;
    color: #666;
    text-align: center;
}

.colecao-posts {
    margin-bottom: 2rem;
}

.titulo-colecao {
    padding: 4rem 2.3rem 1.8rem;
    background-color: #EEE;
    color: #606060;
}

/* FIM FOOTER PRINCIPAL */

/* POST */

.creditos {
    margin-top: 1rem;
    font-size: 0.9rem;
    padding: 1rem 0;
    border-top: 1px solid rgba(0, 0, 0, 0.1);
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    color: rgba(0, 0, 0, 0.45);
    letter-spacing: 2px;
    text-transform: uppercase;
}

.creditos a {
    color: currentColor;
    text-decoration: none;
}

.creditos a:hover {
    color: #b00;
}

a.link-categoria {
    display: inline-block;
    margin-right: 0.5rem;
    margin-top: 0.5rem;
    padding: 0.25rem 1rem;
    background-color: #444;
    color: rgba(255,255,255,.75);
    text-decoration: none;
    border-radius: 5px;
}

.post-content > * {
    margin: 0px 0px 1.2rem;
}

/* FIM POST */

@media (max-width: 800px) {

    /* NAVEGAÇÃO MOBILE */

    .btn-navbar-toggler-wrap {
        padding: .2rem .5rem;
    }

    #btn-navbar-toggler {
        display: block;
        border: 2px solid #EEE;
        border-radius: 6px;
        padding: .5rem 1rem;
        font-size: 1rem;
        background: none;
        cursor: pointer;
    }

    #menu {
        max-height: 0px;
        overflow-y: hidden;
        transition: 0.6s;
    }

    .nav-link {
        display: block;
    }

    #nav.menu-mobile-active #menu{
        display: block;
        max-height: 300px;
    }

    #navbar-toggler-icon {
        display: block;
        width: 20px;
        border-top: 2px solid;
    }

    #navbar-toggler-icon::after, #navbar-toggler-icon::before {
        display: block;
        margin-top: 5px;
        content: '';
        width: 20px;
        height: 2px;
        background: currentColor;
        transition: .3s;
        position: relative;
    }

    #nav.menu-mobile-active #navbar-toggler-icon {
        border-top-color: transparent;
    }

    #nav.menu-mobile-active #navbar-toggler-icon::after {
        transform: rotate(135deg);
        top: -7px;
    }

    #nav.menu-mobile-active #navbar-toggler-icon::before {
        transform: rotate(-135deg);
    }

    /* FIM NAVEGAÇÃO MOBILE */

    /* MAIN PRINCIPAL */

    .row {
        flex-direction: column;
    }

    .primarywrap, .secundarywrap {
        width: auto;
    }

    .widget {
        margin-top: 2rem;
    }

    /* FIM MAIN PRINCIPAL */

    /* FOOTER PRINCIPAL */

    .linha-footer {
        display: block;
        text-align: center;
    }

    .coluna-footer {
        max-width: 100%;
    }

    /* FIM FOOTER PRINCIPAL */
}
    </style>

</head>
<body>

    <header class="header-principal">
        <div class="titulo-subtitulo-outter">
            <div class="titulo-outter">
                <h1 class="titulo-acervolima"><a class="principal-link-acervolima" href="https://es.acervolima.com">Acervo Lima</a></h1>
            </div>
            <div class="subtitulo-outter">
                <h2 class="subtitulo-acervolima">La mayor colección de tutoriales y referencias</h2>
            </div>
        </div>
        <div class="navbar-outter">
            <nav id="nav" class="navbar-principal conteiner">
                <div class="btn-navbar-toggler-wrap">
                    <button id="btn-navbar-toggler" type="button" aria-label="Abrir Menu" aria-haspopup="true" aria-controls="menu" aria-expanded="false">
                        <span id="navbar-toggler-icon"></span>
                    </button>
                </div>
                <div id="menu" class="navbar-nav" role="menu">
                    <a class="nav-link nav-link-ativo" href="/">Home</a>
                    <a class="nav-link" href="https://es.acervolima.com/category/python/">Python</a>
                    <a class="nav-link" href="https://es.acervolima.com/category/javascript/">JavaScript</a>
                    <a class="nav-link" href="https://es.acervolima.com/category/php/">PHP</a>
                </div>
            </nav>
        </div>
    </header>

    <main class="main-principal conteiner">
        <div class="outter">
            <div class="row">
                <div class="col-md-8 primarywrap pb-4">
                    <div class="wrap-main-content">
                        <article class="post">
                            <header class="header-post">
                                <h1 class="titulo-post">Python | Diferentes formas de matar un hilo</h1>
                            </header>
                            <div class="post-content">
                                <div class="traduzido" id_pag="8336">
<p>En general, eliminar subprocesos abruptamente se considera una mala práctica de programación. Matar un hilo de forma abrupta podría dejar un recurso crítico que debe cerrarse correctamente, abierto. Pero es posible que desee eliminar un hilo una vez que haya pasado un período de tiempo específico o se haya generado alguna interrupción. Existen varios métodos mediante los cuales puede matar un hilo en Python.</p>
<ul>
<li>Generando excepciones en un hilo de Python</li>
<li>Establecer / restablecer indicador de parada</li>
<li>Usando trazas para matar hilos</li>
<li>Usando el módulo de multiprocesamiento para matar hilos</li>
<li>Matar el hilo de Python configurándolo como demonio</li>
<li>Usando una función oculta <code>_stop()</code></li>
</ul>
<p><strong>Generación de excepciones en un hilo de Python:</strong><br/>
este método usa la función <a href="https://docs.python.org/3/c-api/init.html?highlight=pythreadstate_setasyncexc#c.PyThreadState_SetAsyncExc">PyThreadState_SetAsyncExc()</a> para generar una excepción en un hilo. Por ejemplo,</p>
<pre class="code">
  
<code class="keyword">import</code> <code class="plain">threading </code>
<code class="keyword">import</code> <code class="plain">ctypes </code>
<code class="keyword">import</code> <code class="plain">time </code>
   
<code class="keyword">class</code> <code class="plain">thread_with_exception(threading.Thread): </code>
    <code class="keyword">def</code> <code class="plain">__init__(</code><code class="color1">self</code><code class="plain">, name): </code>
        <code class="plain">threading.Thread.__init__(</code><code class="color1">self</code><code class="plain">) </code>
        <code class="color1">self</code><code class="plain">.name </code><code class="keyword">=</code> <code class="plain">name </code>
              
    <code class="keyword">def</code> <code class="plain">run(</code><code class="color1">self</code><code class="plain">): </code>
  
        
        <code class="keyword">try</code><code class="plain">: </code>
            <code class="keyword">while</code> <code class="color1">True</code><code class="plain">: </code>
                <code class="functions">print</code><code class="plain">(</code><code class="string">'running '</code> <code class="keyword">+</code> <code class="color1">self</code><code class="plain">.name) </code>
        <code class="keyword">finally</code><code class="plain">: </code>
            <code class="keyword">print</code><code class="plain">(</code><code class="string">'ended'</code><code class="plain">) </code>
           
    <code class="keyword">def</code> <code class="plain">get_id(</code><code class="color1">self</code><code class="plain">): </code>
  
        
        <code class="keyword">if</code> <code class="functions">hasattr</code><code class="plain">(</code><code class="color1">self</code><code class="plain">, </code><code class="string">'_thread_id'</code><code class="plain">): </code>
            <code class="keyword">return</code> <code class="color1">self</code><code class="plain">._thread_id </code>
        <code class="keyword">for</code> <code class="functions">id</code><code class="plain">, thread </code><code class="keyword">in</code> <code class="plain">threading._active.items(): </code>
            <code class="keyword">if</code> <code class="plain">thread </code><code class="keyword">is</code> <code class="color1">self</code><code class="plain">: </code>
                <code class="keyword">return</code> <code class="functions">id</code>
   
    <code class="keyword">def</code> <code class="plain">raise_exception(</code><code class="color1">self</code><code class="plain">): </code>
        <code class="plain">thread_id </code><code class="keyword">=</code> <code class="color1">self</code><code class="plain">.get_id() </code>
        <code class="plain">res </code><code class="keyword">=</code> <code class="plain">ctypes.pythonapi.PyThreadState_SetAsyncExc(thread_id, </code>
              <code class="plain">ctypes.py_object(SystemExit)) </code>
        <code class="keyword">if</code> <code class="plain">res &gt; </code><code class="value">1</code><code class="plain">: </code>
            <code class="plain">ctypes.pythonapi.PyThreadState_SetAsyncExc(thread_id, </code><code class="value">0</code><code class="plain">) </code>
            <code class="functions">print</code><code class="plain">(</code><code class="string">'Exception raise failure'</code><code class="plain">) </code>
       
<code class="plain">t1 </code><code class="keyword">=</code> <code class="plain">thread_with_exception(</code><code class="string">'Thread 1'</code><code class="plain">) </code>
<code class="plain">t1.start() </code>
<code class="plain">time.sleep(</code><code class="value">2</code><code class="plain">) </code>
<code class="plain">t1.raise_exception() </code>
<code class="plain">t1.join() </code>
</pre>
<p>Cuando ejecutamos el código anterior en una máquina y notará, tan pronto como <code>raise_exception()</code>se llame a la función , la función de destino <code>run()</code>finaliza. Esto se debe a que tan pronto como se genera una excepción, el control del programa salta del <code>try</code>bloque y la <code>run()</code>función finaliza. Después <code>join()</code>, se puede llamar a esa función para matar el hilo. En ausencia de la función <code>run_exception()</code>, la función de destino <code>run()</code>sigue ejecutándose para siempre y <code>join()</code>nunca se llama a la función para matar el hilo. <br/>
 <br/>
<strong>Establecer / Restablecer bandera de parada:</strong><br/>
para matar un hilo, podemos declarar una bandera de parada y esta bandera será verificada ocasionalmente por el hilo. Por ejemplo</p>
<pre class="code">
  
<code class="keyword">import</code> <code class="plain">threading </code>
<code class="keyword">import</code> <code class="plain">time </code>
  
<code class="keyword">def</code> <code class="plain">run(): </code>
    <code class="keyword">while</code> <code class="color1">True</code><code class="plain">: </code>
        <code class="keyword">print</code><code class="plain">(</code><code class="string">'thread running'</code><code class="plain">) </code>
        <code class="keyword">global</code> <code class="plain">stop_threads </code>
        <code class="keyword">if</code> <code class="plain">stop_threads: </code>
            <code class="keyword">break</code>
  
<code class="plain">stop_threads </code><code class="keyword">=</code> <code class="color1">False</code>
<code class="plain">t1 </code><code class="keyword">=</code> <code class="plain">threading.Thread(target </code><code class="keyword">=</code> <code class="plain">run) </code>
<code class="plain">t1.start() </code>
<code class="plain">time.sleep(</code><code class="value">1</code><code class="plain">) </code>
<code class="plain">stop_threads </code><code class="keyword">=</code> <code class="color1">True</code>
<code class="plain">t1.join() </code>
<code class="functions">print</code><code class="plain">(</code><code class="string">'thread killed'</code><code class="plain">) </code>
</pre>
<p>En el código anterior, tan pronto como <code>stop_threads</code>se establece la variable global , la función de destino <code>run()</code>finaliza y el hilo <code>t1</code>se puede matar usando <code>t1.join()</code>. Pero uno puede abstenerse de usar la variable global debido a ciertas razones. Para esas situaciones, los objetos de función se pueden pasar para proporcionar una funcionalidad similar a la que se muestra a continuación.</p>
<pre class="code">
  
<code class="keyword">import</code> <code class="plain">threading </code>
<code class="keyword">import</code> <code class="plain">time </code>
  
<code class="keyword">def</code> <code class="plain">run(stop): </code>
    <code class="keyword">while</code> <code class="color1">True</code><code class="plain">: </code>
        <code class="functions">print</code><code class="plain">(</code><code class="string">'thread running'</code><code class="plain">) </code>
        <code class="keyword">if</code> <code class="plain">stop(): </code>
                <code class="keyword">break</code>
                  
<code class="keyword">def</code> <code class="plain">main(): </code>
        <code class="plain">stop_threads </code><code class="keyword">=</code> <code class="color1">False</code>
        <code class="plain">t1 </code><code class="keyword">=</code> <code class="plain">threading.Thread(target </code><code class="keyword">=</code> <code class="plain">run, args </code><code class="keyword">=</code><code class="plain">(</code><code class="keyword">lambda</code> <code class="plain">: stop_threads, )) </code>
        <code class="plain">t1.start() </code>
        <code class="plain">time.sleep(</code><code class="value">1</code><code class="plain">) </code>
        <code class="plain">stop_threads </code><code class="keyword">=</code> <code class="color1">True</code>
        <code class="plain">t1.join() </code>
        <code class="keyword">print</code><code class="plain">(</code><code class="string">'thread killed'</code><code class="plain">) </code>
<code class="plain">main() </code>
</pre>
<p>El objeto de función pasado en el código anterior siempre devuelve el valor de la variable local <code>stop_threads</code>. Este valor se verifica en la función <code>run()</code>y, tan pronto como <code>stop_threads</code>se restablece, la <code>run()</code>función finaliza y el hilo se puede matar. <br/>
 <br/>
<strong>Uso de seguimientos para matar subprocesos:</strong><br/>
este método funciona instalando <strong>rastros</strong> en cada subproceso. Cada rastro se termina en la detección de algún estímulo o bandera, matando instantáneamente el hilo asociado. Por ejemplo</p><br/><div class="_ap_apex_ad" id="d6f45c53-ff16-4cc5-8b91-eb6ee7037116"></div><br/>
<pre class="code">
  
<code class="keyword">import</code> <code class="plain">sys </code>
<code class="keyword">import</code> <code class="plain">trace </code>
<code class="keyword">import</code> <code class="plain">threading </code>
<code class="keyword">import</code> <code class="plain">time </code>
<code class="keyword">class</code> <code class="plain">thread_with_trace(threading.Thread): </code>
  <code class="keyword">def</code> <code class="plain">__init__(</code><code class="color1">self</code><code class="plain">, </code><code class="keyword">*</code><code class="plain">args, </code><code class="keyword">*</code><code class="keyword">*</code><code class="plain">keywords): </code>
    <code class="plain">threading.Thread.__init__(</code><code class="color1">self</code><code class="plain">, </code><code class="keyword">*</code><code class="plain">args, </code><code class="keyword">*</code><code class="keyword">*</code><code class="plain">keywords) </code>
    <code class="color1">self</code><code class="plain">.killed </code><code class="keyword">=</code> <code class="color1">False</code>
  
  <code class="keyword">def</code> <code class="plain">start(</code><code class="color1">self</code><code class="plain">): </code>
    <code class="color1">self</code><code class="plain">.__run_backup </code><code class="keyword">=</code> <code class="color1">self</code><code class="plain">.run </code>
    <code class="color1">self</code><code class="plain">.run </code><code class="keyword">=</code> <code class="color1">self</code><code class="plain">.__run       </code>
    <code class="plain">threading.Thread.start(</code><code class="color1">self</code><code class="plain">) </code>
  
  <code class="keyword">def</code> <code class="plain">__run(</code><code class="color1">self</code><code class="plain">): </code>
    <code class="plain">sys.settrace(</code><code class="color1">self</code><code class="plain">.globaltrace) </code>
    <code class="color1">self</code><code class="plain">.__run_backup() </code>
    <code class="color1">self</code><code class="plain">.run </code><code class="keyword">=</code> <code class="color1">self</code><code class="plain">.__run_backup </code>
  
  <code class="keyword">def</code> <code class="plain">globaltrace(</code><code class="color1">self</code><code class="plain">, frame, event, arg): </code>
    <code class="keyword">if</code> <code class="plain">event </code><code class="keyword">=</code><code class="keyword">=</code> <code class="string">'call'</code><code class="plain">: </code>
      <code class="keyword">return</code> <code class="color1">self</code><code class="plain">.localtrace </code>
    <code class="keyword">else</code><code class="plain">: </code>
      <code class="keyword">return</code> <code class="color1">None</code>
  
  <code class="keyword">def</code> <code class="plain">localtrace(</code><code class="color1">self</code><code class="plain">, frame, event, arg): </code>
    <code class="keyword">if</code> <code class="color1">self</code><code class="plain">.killed: </code>
      <code class="keyword">if</code> <code class="plain">event </code><code class="keyword">=</code><code class="keyword">=</code> <code class="string">'line'</code><code class="plain">: </code>
        <code class="keyword">raise</code> <code class="plain">SystemExit() </code>
    <code class="keyword">return</code> <code class="color1">self</code><code class="plain">.localtrace </code>
  
  <code class="keyword">def</code> <code class="plain">kill(</code><code class="color1">self</code><code class="plain">): </code>
    <code class="color1">self</code><code class="plain">.killed </code><code class="keyword">=</code> <code class="color1">True</code>
  
<code class="keyword">def</code> <code class="plain">func(): </code>
  <code class="keyword">while</code> <code class="color1">True</code><code class="plain">: </code>
    <code class="functions">print</code><code class="plain">(</code><code class="string">'thread running'</code><code class="plain">) </code>
  
<code class="plain">t1 </code><code class="keyword">=</code> <code class="plain">thread_with_trace(target </code><code class="keyword">=</code> <code class="plain">func) </code>
<code class="plain">t1.start() </code>
<code class="plain">time.sleep(</code><code class="value">2</code><code class="plain">) </code>
<code class="plain">t1.kill() </code>
<code class="plain">t1.join() </code>
<code class="keyword">if</code> <code class="keyword">not</code> <code class="plain">t1.isAlive(): </code>
  <code class="keyword">print</code><code class="plain">(</code><code class="string">'thread killed'</code><code class="plain">) </code>
</pre>
<p>En este código, <code>start()</code>se modifica ligeramente para configurar la función de seguimiento del sistema mediante <a href="https://docs.python.org/2/library/sys.html?highlight=settrace#sys.settrace">settrace()</a> . La función de rastreo local se define de manera que, siempre que <code>killed</code>se establezca el indicador de interrupción( ) del subproceso respectivo, se <a href="https://es.acervolima.com/excepciones-integradas-en-python/">genera</a> una excepción de <a href="https://es.acervolima.com/excepciones-integradas-en-python/">salida del sistema</a> cuando se excita la siguiente línea de código, que finaliza la ejecución de la función de destino <code>func</code>. Ahora el hilo se puede matar con <code>join()</code>. <br/>
 <br/>
<strong>Con el módulo de multiprocesamiento para matar las discusiones:</strong><br/>
El <a href="https://es.acervolima.com/multiprocesamiento-en-python--conjunto-1introduccion/"> módulo de multiprocesamiento</a>de Python que permite a los procesos de regeneración de la misma manera le hilos de regeneración utilizando el módulo threading. La interfaz del módulo de subprocesos múltiples es similar a la del módulo de subprocesos. Por ejemplo, en un código dado creamos tres subprocesos(procesos) que cuentan de 1 a 9.</p>
<pre class="code">
  
<code class="keyword">import</code> <code class="plain">threading </code>
<code class="keyword">import</code> <code class="plain">time </code>
  
<code class="keyword">def</code> <code class="plain">func(number): </code>
    <code class="keyword">for</code> <code class="plain">i </code><code class="keyword">in</code> <code class="functions">range</code><code class="plain">(</code><code class="value">1</code><code class="plain">, </code><code class="value">10</code><code class="plain">): </code>
        <code class="plain">time.sleep(</code><code class="value">0.01</code><code class="plain">) </code>
        <code class="keyword">print</code><code class="plain">(</code><code class="string">'Thread '</code> <code class="keyword">+</code> <code class="functions">str</code><code class="plain">(number) </code><code class="keyword">+</code> <code class="string">': prints '</code> <code class="keyword">+</code> <code class="functions">str</code><code class="plain">(number</code><code class="keyword">*</code><code class="plain">i)) </code>
  
<code class="keyword">for</code> <code class="plain">i </code><code class="keyword">in</code> <code class="functions">range</code><code class="plain">(</code><code class="value">0</code><code class="plain">, </code><code class="value">3</code><code class="plain">): </code>
    <code class="plain">thread </code><code class="keyword">=</code> <code class="plain">threading.Thread(target</code><code class="keyword">=</code><code class="plain">func, args</code><code class="keyword">=</code><code class="plain">(i,)) </code>
    <code class="plain">thread.start() </code>
</pre>
<p>La funcionalidad del código anterior también se puede implementar utilizando el módulo de multiprocesamiento de manera similar, con muy pocos cambios. Consulte el código que se proporciona a continuación.</p>
<pre class="code">
  
<code class="keyword">import</code> <code class="plain">multiprocessing </code>
<code class="keyword">import</code> <code class="plain">time </code>
  
<code class="keyword">def</code> <code class="plain">func(number): </code>
    <code class="keyword">for</code> <code class="plain">i </code><code class="keyword">in</code> <code class="functions">range</code><code class="plain">(</code><code class="value">1</code><code class="plain">, </code><code class="value">10</code><code class="plain">): </code>
        <code class="plain">time.sleep(</code><code class="value">0.01</code><code class="plain">) </code>
        <code class="keyword">print</code><code class="plain">(</code><code class="string">'Processing '</code> <code class="keyword">+</code> <code class="functions">str</code><code class="plain">(number) </code><code class="keyword">+</code> <code class="string">': prints '</code> <code class="keyword">+</code> <code class="functions">str</code><code class="plain">(number</code><code class="keyword">*</code><code class="plain">i)) </code>
  
<code class="keyword">for</code> <code class="plain">i </code><code class="keyword">in</code> <code class="functions">range</code><code class="plain">(</code><code class="value">0</code><code class="plain">, </code><code class="value">3</code><code class="plain">): </code>
    <code class="plain">process </code><code class="keyword">=</code> <code class="plain">multiprocessing.Process(target</code><code class="keyword">=</code><code class="plain">func, args</code><code class="keyword">=</code><code class="plain">(i,)) </code>
    <code class="plain">process.start() </code>
</pre>
<p>Aunque la interfaz de los dos módulos es similar, los dos módulos tienen implementaciones muy diferentes. Todos los hilos comparten variables globales, mientras que los procesos están completamente separados entre sí. Por lo tanto, matar procesos es mucho más seguro en comparación con matar hilos. A la <code>Process</code>clase se le proporciona un método, <a href="https://docs.python.org/3.4/library/multiprocessing.html?highlight=process#multiprocessing.Process.terminate">terminate()</a> , para matar un proceso. Ahora, volviendo al problema inicial. Suponga que en el código anterior, queremos matar todos los procesos después de que hayan pasado 0.03s. Esta funcionalidad se logra utilizando el módulo de multiprocesamiento en el siguiente código.</p>
<pre class="code">
  
<code class="keyword">import</code> <code class="plain">multiprocessing </code>
<code class="keyword">import</code> <code class="plain">time </code>
  
<code class="keyword">def</code> <code class="plain">func(number): </code>
    <code class="keyword">for</code> <code class="plain">i </code><code class="keyword">in</code> <code class="functions">range</code><code class="plain">(</code><code class="value">1</code><code class="plain">, </code><code class="value">10</code><code class="plain">): </code>
        <code class="plain">time.sleep(</code><code class="value">0.01</code><code class="plain">) </code>
        <code class="functions">print</code><code class="plain">(</code><code class="string">'Processing '</code> <code class="keyword">+</code> <code class="functions">str</code><code class="plain">(number) </code><code class="keyword">+</code> <code class="string">': prints '</code> <code class="keyword">+</code> <code class="functions">str</code><code class="plain">(number</code><code class="keyword">*</code><code class="plain">i)) </code>
  
<code class="plain">all_processes </code><code class="keyword">=</code> <code class="plain">[] </code>
  
<code class="keyword">for</code> <code class="plain">i </code><code class="keyword">in</code> <code class="functions">range</code><code class="plain">(</code><code class="value">0</code><code class="plain">, </code><code class="value">3</code><code class="plain">): </code>
    <code class="plain">process </code><code class="keyword">=</code> <code class="plain">multiprocessing.Process(target</code><code class="keyword">=</code><code class="plain">func, args</code><code class="keyword">=</code><code class="plain">(i,)) </code>
    <code class="plain">process.start() </code>
    <code class="plain">all_processes.append(process) </code>
  
<code class="plain">time.sleep(</code><code class="value">0.03</code><code class="plain">) </code>
<code class="keyword">for</code> <code class="plain">process </code><code class="keyword">in</code> <code class="plain">all_processes: </code>
    <code class="plain">process.terminate() </code>
</pre>
<p>Aunque los dos módulos tienen diferentes implementaciones. Esta funcionalidad proporcionada por el módulo de multiprocesamiento en el código anterior es similar a matar hilos. Por lo tanto, el módulo de multiprocesamiento se puede usar como una <strong>alternativa</strong> simple siempre que se nos requiera implementar la eliminación de subprocesos en Python. <br/>
 <br/>
<strong>Matar el hilo de Python configurándolo como daemon: Los </strong><br/>
<a href="https://docs.python.org/3/library/threading.html#threading.Thread.daemon">hilos de Daemon</a> son aquellos hilos que se matan cuando el programa principal sale. Por ejemplo</p>
<pre class="code">
<code class="keyword">import</code> <code class="plain">threading </code>
<code class="keyword">import</code> <code class="plain">time </code>
<code class="keyword">import</code> <code class="plain">sys </code>
  
<code class="keyword">def</code> <code class="plain">func(): </code>
    <code class="keyword">while</code> <code class="color1">True</code><code class="plain">: </code>
        <code class="plain">time.sleep(</code><code class="value">0.5</code><code class="plain">) </code>
        <code class="functions">print</code><code class="plain">(</code><code class="string">"Thread alive, and it won't die on program termination"</code><code class="plain">) </code>
  
<code class="plain">t1 </code><code class="keyword">=</code> <code class="plain">threading.Thread(target</code><code class="keyword">=</code><code class="plain">func) </code>
<code class="plain">t1.start() </code>
<code class="plain">time.sleep(</code><code class="value">2</code><code class="plain">) </code>
<code class="plain">sys.exit() </code>
</pre>
<p>Tenga en cuenta que el hilo <code>t1</code>permanece vivo y evita que el programa principal salga a través de <code>sys.exit()</code>. En Python, cualquier hilo vivo que no sea demonio bloquea el programa principal para salir. Considerando que, los subprocesos del demonio se eliminan tan pronto como sale del programa principal. En otras palabras, tan pronto como se cierra el programa principal, se eliminan todos los subprocesos del demonio. Para declarar un hilo como demonio, establecemos el argumento de la palabra clave <code>daemon</code>como <code>True</code>. Por ejemplo, en el código dado, demuestra la propiedad de los hilos de demonio.</p>
<pre class="code">
  
<code class="keyword">import</code> <code class="plain">threading </code>
<code class="keyword">import</code> <code class="plain">time </code>
<code class="keyword">import</code> <code class="plain">sys </code>
  
<code class="keyword">def</code> <code class="plain">func(): </code>
    <code class="keyword">while</code> <code class="color1">True</code><code class="plain">: </code>
        <code class="plain">time.sleep(</code><code class="value">0.5</code><code class="plain">) </code>
        <code class="keyword">print</code><code class="plain">(</code><code class="string">'Thread alive, but it will die on program termination'</code><code class="plain">) </code>
  
<code class="plain">t1 </code><code class="keyword">=</code> <code class="plain">threading.Thread(target</code><code class="keyword">=</code><code class="plain">func) </code>
<code class="plain">t1.daemon </code><code class="keyword">=</code> <code class="color1">True</code>
<code class="plain">t1.start() </code>
<code class="plain">time.sleep(</code><code class="value">2</code><code class="plain">) </code>
<code class="plain">sys.exit() </code>
</pre>
<p>Tenga en cuenta que, tan pronto como se cierra el programa principal, <code>t1</code>se mata el hilo . Este método demuestra ser extremadamente útil en los casos en que la terminación del programa se puede utilizar para desencadenar la eliminación de subprocesos. Tenga en cuenta que en Python, el programa principal finaliza tan pronto como todos los subprocesos que no son demonio están muertos, independientemente del número de subprocesos daemon activos. Por lo tanto, es posible que los recursos de estos subprocesos del demonio, como archivos abiertos, transacciones de bases de datos, etc., no se liberen correctamente. El hilo de control inicial en un programa de Python no es un hilo de demonio. No se recomienda matar un hilo a la fuerza a menos que se sepa con certeza que hacerlo no provocará fugas o puntos muertos. <br/>
<strong>Usando una función oculta <code>_stop()</code>:</strong><br/>
para matar un hilo, usamos la función oculta<code>_stop()</code> esta función no está documentada pero podría desaparecer en la próxima versión de Python.</p>
<pre class="code">
  
<code class="keyword">import</code> <code class="plain">time </code>
<code class="keyword">import</code> <code class="plain">threading </code>
  
<code class="keyword">class</code> <code class="plain">MyThread(threading.Thread): </code>
  
    
    
    
  
    <code class="keyword">def</code> <code class="plain">__init__(</code><code class="color1">self</code><code class="plain">, </code><code class="keyword">*</code><code class="plain">args, </code><code class="keyword">*</code><code class="keyword">*</code><code class="plain">kwargs): </code>
        <code class="functions">super</code><code class="plain">(MyThread, </code><code class="color1">self</code><code class="plain">).__init__(</code><code class="keyword">*</code><code class="plain">args, </code><code class="keyword">*</code><code class="keyword">*</code><code class="plain">kwargs) </code>
        <code class="color1">self</code><code class="plain">._stop </code><code class="keyword">=</code> <code class="plain">threading.Event() </code>
  
    
    <code class="keyword">def</code> <code class="plain">stop(</code><code class="color1">self</code><code class="plain">): </code>
        <code class="color1">self</code><code class="plain">._stop.</code><code class="functions">set</code><code class="plain">() </code>
  
    <code class="keyword">def</code> <code class="plain">stopped(</code><code class="color1">self</code><code class="plain">): </code>
        <code class="keyword">return</code> <code class="color1">self</code><code class="plain">._stop.isSet() </code>
  
    <code class="keyword">def</code> <code class="plain">run(</code><code class="color1">self</code><code class="plain">): </code>
        <code class="keyword">while</code> <code class="color1">True</code><code class="plain">: </code>
            <code class="keyword">if</code> <code class="color1">self</code><code class="plain">.stopped(): </code>
                <code class="keyword">return</code>
            <code class="functions">print</code><code class="plain">(</code><code class="string">"Hello, world!"</code><code class="plain">) </code>
            <code class="plain">time.sleep(</code><code class="value">1</code><code class="plain">) </code>
  
<code class="plain">t1 </code><code class="keyword">=</code> <code class="plain">MyThread() </code>
  
<code class="plain">t1.start() </code>
<code class="plain">time.sleep(</code><code class="value">5</code><code class="plain">) </code>
<code class="plain">t1.stop() </code>
<code class="plain">t1.join() </code>
</pre>
<p><strong>Nota: Es</strong> posible que los métodos anteriores no funcionen en una situación u otra, porque Python no proporciona ningún método directo para eliminar subprocesos.</p>
</div>
                            </div>
                            <div class="clearfix nav-prev-next">
                                <a class="float-start prev-next" href="https://es.acervolima.com/python-tensorflow-math-sqrt/">Anterior</a>
                                <a class="float-end prev-next" href="https://es.acervolima.com/como-probar-la-velocidad-de-escritura-con-python/">Próximo</a>
                            </div>
                            <footer class="footer-post">
                                <div class="creditos">
                                    by <a href="https://auth.geeksforgeeks.org/user/Manthanchauhan/articles" target="_blank">Manthanchauhan</a> and translated by Acervo Lima From <a href="https://www.geeksforgeeks.org/python-different-ways-to-kill-a-thread/" target="_blank">Python | Different ways to kill a Thread</a>. License: <a href="https://creativecommons.org/licenses/by-sa/4.0/" target="_blank">CCBY-SA</a>
                                </div>
                                <div class="post-categorias">
                                    <a href="https://es.acervolima.com/category/picked/" class="link-categoria">Picked</a><a href="https://es.acervolima.com/category/python-multithreading/" class="link-categoria">Python-multithreading</a><a href="https://es.acervolima.com/category/python/" class="link-categoria">Python</a>
                                </div>
                            </footer>

                        </article>
                    </div>
                    
                </div>
                <div class="col-md-4 secundarywrap">
                    <div class="widgets-wrap">
                        <div class="widget widget-lastest-posts">
                            <h2 class="text-black text-uppercase widget-titulo">Latest posts</h2>
                            <div class="widget-content">
                                <ul class="list-group list-group-flush">
                                    <li class="list-group-item"><a href="https://es.acervolima.com/experiencia-de-entrevista-de-epicor/">Experiencia de entrevista de Epicor</a></li><li class="list-group-item"><a href="https://es.acervolima.com/experiencia-de-entrevista-de-ebix/">Experiencia de entrevista de Ebix</a></li><li class="list-group-item"><a href="https://es.acervolima.com/experiencia-de-entrevista-pickyourtrail-set-1/">Experiencia de entrevista Pickyourtrail (SET 1)</a></li><li class="list-group-item"><a href="https://es.acervolima.com/c-dot-experiencia-de-entrevista-a-tiempo-completo/">C-DOT (Experiencia de entrevista a tiempo completo)</a></li><li class="list-group-item"><a href="https://es.acervolima.com/diferencia-maxima-de-peso/">Diferencia máxima de peso</a></li>
                                </ul>
                            </div>
                        </div>
                        <div class="widget widget-most-popular-posts">
                            <h2 class="text-black text-uppercase widget-titulo">Most popular posts</h2>
                            <div class="widget-content">
                                <ul class="list-group list-group-flush">
                                    <li class="list-group-item"><a href="https://es.acervolima.com/como-sumar-y-restar-dias-usando-datetime-en-python/">¿Cómo sumar y restar días usando DateTime en Python?</a></li><li class="list-group-item"><a href="https://es.acervolima.com/los-10-principales-lenguajes-de-programacion-para-el-desarrollo-de-blockchain/">Los 10 principales lenguajes de programación para el desarrollo de blockchain</a></li><li class="list-group-item"><a href="https://es.acervolima.com/cual-es-la-probabilidad-de-obtener-un-10-o-una-jota-de-una-baraja-de-52-cartas/">¿Cuál es la probabilidad de obtener un 10 o una jota de una baraja de 52 cartas?</a></li><li class="list-group-item"><a href="https://es.acervolima.com/10-mejores-ide-para-desarrolladores-de-c-o-c-en-2021/">10 mejores IDE para desarrolladores de C o C++ en 2021</a></li><li class="list-group-item"><a href="https://es.acervolima.com/como-redondear-numeros-en-python/">¿Cómo redondear números en Python?</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <footer class="footer-principal">
        <div class="linha-footer">
            <div class="coluna-footer">
                <span class="titulo-coluna">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-diamond-fill" viewBox="0 0 16 16">
                        <path d="M9.05.435c-.58-.58-1.52-.58-2.1 0L4.047 3.339 8 7.293l3.954-3.954L9.049.435zm3.61 3.611L8.708 8l3.954 3.954 2.904-2.905c.58-.58.58-1.519 0-2.098l-2.904-2.905zm-.706 8.614L8 8.708l-3.954 3.954 2.905 2.904c.58.58 1.519.58 2.098 0l2.905-2.904zm-8.614-.706L7.292 8 3.339 4.046.435 6.951c-.58.58-.58 1.519 0 2.098l2.904 2.905z"/>
                    </svg>
                    Acervo Lima
                </span>
                <p>Acervo Lima provides translations of articles published on GeekForGeeks for several languages. </p>
            </div>
            <div class="coluna-footer">
                <span class="titulo-coluna">Main categories</span>
                <p><a class="footer-coluna-link" href="https://es.acervolima.com/category/python/">Python</a></p>
                <p><a class="footer-coluna-link" href="https://es.acervolima.com/category/javascript/">JavaScript</a></p>
                <p><a class="footer-coluna-link" href="https://es.acervolima.com/category/php/">PHP</a></p>
                <p><a class="footer-coluna-link" href="https://es.acervolima.com/category/java/">Java</a></p>
            </div>
            <div class="coluna-footer">
                <span class="titulo-coluna">More categories</span>
                <p><a class="footer-coluna-link" href="https://es.acervolima.com/category/gblog/">GBlog</a></p>
                <p><a class="footer-coluna-link" href="https://es.acervolima.com/category/golang/">Golang</a></p>
                <p><a class="footer-coluna-link" href="https://es.acervolima.com/category/kotlin/">Kotlin</a></p>
                <p><a class="footer-coluna-link" href="https://es.acervolima.com/category/ruby/">Ruby</a></p>
            </div>
            <div class="coluna-footer">
                <span class="titulo-coluna">Contact</span>
                <p>
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-house-fill" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="m8 3.293 6 6V13.5a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 13.5V9.293l6-6zm5-.793V6l-2-2V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5z"/>
                        <path fill-rule="evenodd" d="M7.293 1.5a1 1 0 0 1 1.414 0l6.647 6.646a.5.5 0 0 1-.708.708L8 2.207 1.354 8.854a.5.5 0 1 1-.708-.708L7.293 1.5z"/>
                    </svg>
                    Icapuí-CE, Brasil
                </p>
                <p>
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-envelope-fill" viewBox="0 0 16 16">
                        <path d="M.05 3.555A2 2 0 0 1 2 2h12a2 2 0 0 1 1.95 1.555L8 8.414.05 3.555ZM0 4.697v7.104l5.803-3.558L0 4.697ZM6.761 8.83l-6.57 4.027A2 2 0 0 0 2 14h12a2 2 0 0 0 1.808-1.144l-6.57-4.027L8 9.586l-1.239-.757Zm3.436-.586L16 11.801V4.697l-5.803 3.546Z"/>
                    </svg>
                    contact@acervolima.com
                </p>
            </div>
        </div>
        <div class="footer-copyright">
            &copy; 2022 Acervo Lima, Some rights reserved
        </div>
    </footer>

    <script>

        const btnMobile = document.getElementById('btn-navbar-toggler');

        function toggleMenu(event) {

            if (event.type === 'touchstart') event.preventDefault();

            const nav = document.getElementById('nav');
            nav.classList.toggle('menu-mobile-active');
            const menuMobileAtivo = nav.classList.contains('menu-mobile-active');
            event.currentTarget.setAttribute('aria-expanded', menuMobileAtivo);

            if (menuMobileAtivo) {

                event.currentTarget.setAttribute('aria-label', 'Fechar Menu');

            } else {

                event.currentTarget.setAttribute('aria-label', 'Abrir Menu');

            }
        }

        btnMobile.addEventListener('click', toggleMenu);
        btnMobile.addEventListener('touchstart', toggleMenu);
        
    </script>

    <script>

        function iniciarScriptTerceiros() {

            // Google Adsense
            let scriptAds = document.createElement('script');
            scriptAds.setAttribute("data-ad-client", "ca-pub-7274418547299766");
            scriptAds.src = "https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js";
            document.body.append(scriptAds);

            // Google Analytics
            let scriptGA = document.createElement('script');
            scriptGA.src = "https://www.googletagmanager.com/gtag/js?id=G-9BY86T1KXF";
            document.body.append(scriptGA);

            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());

            gtag('config', 'G-9BY86T1KXF');

        }

        window.onload = iniciarScriptTerceiros;

    </script>
    
</body>
</html>